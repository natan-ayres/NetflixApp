# Generated by Django 5.1.7 on 2025-03-27 20:28

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Movies',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('genre', models.CharField(max_length=50)),
                ('director', models.CharField(blank=True, max_length=100, null=True)),
                ('writer', models.TextField(blank=True, max_length=200, null=True)),
                ('actors', models.TextField(blank=True, max_length=200, null=True)),
                ('sinopse', models.TextField(max_length=200)),
                ('poster_url', models.CharField(max_length=200)),
                ('rated', models.CharField(blank=True, choices=[('G', 'G'), ('PG', 'PG'), ('PG-13', 'PG-13'), ('R', 'R'), ('NC-17', 'NC-17')], max_length=20, null=True)),
                ('launch_date', models.CharField(blank=True, max_length=20, null=True)),
                ('runtime', models.IntegerField()),
                ('likeability', models.JSONField(blank=True, default=dict, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Series',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('genre', models.CharField(max_length=50)),
                ('director', models.CharField(blank=True, max_length=100, null=True)),
                ('writer', models.TextField(blank=True, max_length=200, null=True)),
                ('actors', models.TextField(blank=True, max_length=200, null=True)),
                ('sinopse', models.TextField(max_length=200)),
                ('rated', models.CharField(blank=True, choices=[('TV-Y', 'TV-Y'), ('TV-Y7', 'TV-Y7'), ('TV-Y7-FV', 'TV-Y7-FV'), ('TV-G', 'TV-G'), ('TV-PG', 'TV-PG'), ('TV-14', 'TV-14'), ('TV-MA', 'TV-MA')], max_length=20, null=True)),
                ('poster_url', models.CharField(max_length=200)),
                ('launch_date', models.CharField(blank=True, max_length=20, null=True)),
                ('episodes', models.IntegerField()),
                ('seasons', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfiles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=30)),
                ('image', models.ImageField(blank=True, null=True, upload_to='profile_pics')),
                ('account', models.IntegerField(default=0)),
                ('likeability', models.JSONField(blank=True, default=dict, null=True)),
                ('favorites', models.ManyToManyField(blank=True, related_name='favorites', to='gestao.movies')),
                ('favorites_series', models.ManyToManyField(blank=True, related_name='favorites_series', to='gestao.series')),
                ('watchlist', models.ManyToManyField(blank=True, related_name='watchlist', to='gestao.movies')),
                ('watchlist_series', models.ManyToManyField(blank=True, related_name='watchlist_series', to='gestao.series')),
            ],
        ),
        migrations.CreateModel(
            name='UserAccounts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('plans', models.CharField(blank=True, choices=[('BASIC', 'BASIC'), ('STANDARD', 'STANDARD'), ('PREMIUM', 'PREMIUM')], max_length=20, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('users', models.ManyToManyField(blank=True, related_name='users', to='gestao.userprofiles')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
